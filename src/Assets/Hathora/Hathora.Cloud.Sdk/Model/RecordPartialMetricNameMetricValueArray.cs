/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// Construct a type with a set of properties K of type T
    /// </summary>
    [DataContract(Name = "Record_Partial_MetricName_.MetricValue-Array_")]
    public partial class RecordPartialMetricNameMetricValueArray : IEquatable<RecordPartialMetricNameMetricValueArray>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordPartialMetricNameMetricValueArray" /> class.
        /// </summary>
        /// <param name="cpu">cpu.</param>
        /// <param name="memory">memory.</param>
        /// <param name="rateEgress">rateEgress.</param>
        /// <param name="totalEgress">totalEgress.</param>
        public RecordPartialMetricNameMetricValueArray(List<MetricValue> cpu = default(List<MetricValue>), List<MetricValue> memory = default(List<MetricValue>), List<MetricValue> rateEgress = default(List<MetricValue>), List<MetricValue> totalEgress = default(List<MetricValue>))
        {
            this.Cpu = cpu;
            this.Memory = memory;
            this.RateEgress = rateEgress;
            this.TotalEgress = totalEgress;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Cpu
        /// </summary>
        [DataMember(Name = "cpu", EmitDefaultValue = false)]
        public List<MetricValue> Cpu { get; set; }

        /// <summary>
        /// Gets or Sets Memory
        /// </summary>
        [DataMember(Name = "memory", EmitDefaultValue = false)]
        public List<MetricValue> Memory { get; set; }

        /// <summary>
        /// Gets or Sets RateEgress
        /// </summary>
        [DataMember(Name = "rate_egress", EmitDefaultValue = false)]
        public List<MetricValue> RateEgress { get; set; }

        /// <summary>
        /// Gets or Sets TotalEgress
        /// </summary>
        [DataMember(Name = "total_egress", EmitDefaultValue = false)]
        public List<MetricValue> TotalEgress { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordPartialMetricNameMetricValueArray {\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  RateEgress: ").Append(RateEgress).Append("\n");
            sb.Append("  TotalEgress: ").Append(TotalEgress).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordPartialMetricNameMetricValueArray);
        }

        /// <summary>
        /// Returns true if RecordPartialMetricNameMetricValueArray instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordPartialMetricNameMetricValueArray to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordPartialMetricNameMetricValueArray input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cpu == input.Cpu ||
                    this.Cpu != null &&
                    input.Cpu != null &&
                    this.Cpu.SequenceEqual(input.Cpu)
                ) && 
                (
                    this.Memory == input.Memory ||
                    this.Memory != null &&
                    input.Memory != null &&
                    this.Memory.SequenceEqual(input.Memory)
                ) && 
                (
                    this.RateEgress == input.RateEgress ||
                    this.RateEgress != null &&
                    input.RateEgress != null &&
                    this.RateEgress.SequenceEqual(input.RateEgress)
                ) && 
                (
                    this.TotalEgress == input.TotalEgress ||
                    this.TotalEgress != null &&
                    input.TotalEgress != null &&
                    this.TotalEgress.SequenceEqual(input.TotalEgress)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cpu != null)
                {
                    hashCode = (hashCode * 59) + this.Cpu.GetHashCode();
                }
                if (this.Memory != null)
                {
                    hashCode = (hashCode * 59) + this.Memory.GetHashCode();
                }
                if (this.RateEgress != null)
                {
                    hashCode = (hashCode * 59) + this.RateEgress.GetHashCode();
                }
                if (this.TotalEgress != null)
                {
                    hashCode = (hashCode * 59) + this.TotalEgress.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
