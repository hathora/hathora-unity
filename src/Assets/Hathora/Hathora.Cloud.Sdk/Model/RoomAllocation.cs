/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// RoomAllocation
    /// </summary>
    [DataContract(Name = "RoomAllocation")]
    public partial class RoomAllocation : IEquatable<RoomAllocation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomAllocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoomAllocation()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomAllocation" /> class.
        /// </summary>
        /// <param name="unscheduledAt">unscheduledAt (required).</param>
        /// <param name="scheduledAt">scheduledAt (required).</param>
        /// <param name="processId">processId (required).</param>
        /// <param name="roomAllocationId">roomAllocationId (required).</param>
        public RoomAllocation(DateTime? unscheduledAt = default(DateTime?), DateTime scheduledAt = default(DateTime), string processId = default(string), string roomAllocationId = default(string))
        {
            // to ensure "unscheduledAt" is required (not null)
            if (unscheduledAt == null)
            {
                throw new ArgumentNullException("unscheduledAt is a required property for RoomAllocation and cannot be null");
            }
            this.UnscheduledAt = unscheduledAt;
            this.ScheduledAt = scheduledAt;
            // to ensure "processId" is required (not null)
            if (processId == null)
            {
                throw new ArgumentNullException("processId is a required property for RoomAllocation and cannot be null");
            }
            this.ProcessId = processId;
            // to ensure "roomAllocationId" is required (not null)
            if (roomAllocationId == null)
            {
                throw new ArgumentNullException("roomAllocationId is a required property for RoomAllocation and cannot be null");
            }
            this.RoomAllocationId = roomAllocationId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets UnscheduledAt
        /// </summary>
        [DataMember(Name = "unscheduledAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? UnscheduledAt { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledAt
        /// </summary>
        [DataMember(Name = "scheduledAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ScheduledAt { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets RoomAllocationId
        /// </summary>
        [DataMember(Name = "roomAllocationId", IsRequired = true, EmitDefaultValue = true)]
        public string RoomAllocationId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoomAllocation {\n");
            sb.Append("  UnscheduledAt: ").Append(UnscheduledAt).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  RoomAllocationId: ").Append(RoomAllocationId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoomAllocation);
        }

        /// <summary>
        /// Returns true if RoomAllocation instances are equal
        /// </summary>
        /// <param name="input">Instance of RoomAllocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoomAllocation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnscheduledAt == input.UnscheduledAt ||
                    (this.UnscheduledAt != null &&
                    this.UnscheduledAt.Equals(input.UnscheduledAt))
                ) && 
                (
                    this.ScheduledAt == input.ScheduledAt ||
                    (this.ScheduledAt != null &&
                    this.ScheduledAt.Equals(input.ScheduledAt))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.RoomAllocationId == input.RoomAllocationId ||
                    (this.RoomAllocationId != null &&
                    this.RoomAllocationId.Equals(input.RoomAllocationId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnscheduledAt != null)
                {
                    hashCode = (hashCode * 59) + this.UnscheduledAt.GetHashCode();
                }
                if (this.ScheduledAt != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledAt.GetHashCode();
                }
                if (this.ProcessId != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessId.GetHashCode();
                }
                if (this.RoomAllocationId != null)
                {
                    hashCode = (hashCode * 59) + this.RoomAllocationId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
