/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// ProcessWithRoomsAllOf
    /// </summary>
    [DataContract(Name = "ProcessWithRooms_allOf")]
    public partial class ProcessWithRoomsAllOf : IEquatable<ProcessWithRoomsAllOf>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessWithRoomsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessWithRoomsAllOf()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessWithRoomsAllOf" /> class.
        /// </summary>
        /// <param name="rooms">rooms (required).</param>
        /// <param name="totalRooms">totalRooms (required).</param>
        public ProcessWithRoomsAllOf(List<PickRoomExcludeKeyofRoomAllocations> rooms = default(List<PickRoomExcludeKeyofRoomAllocations>), double totalRooms = default(double))
        {
            // to ensure "rooms" is required (not null)
            if (rooms == null)
            {
                throw new ArgumentNullException("rooms is a required property for ProcessWithRoomsAllOf and cannot be null");
            }
            this.Rooms = rooms;
            this.TotalRooms = totalRooms;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Rooms
        /// </summary>
        [DataMember(Name = "rooms", IsRequired = true, EmitDefaultValue = true)]
        public List<PickRoomExcludeKeyofRoomAllocations> Rooms { get; set; }

        /// <summary>
        /// Gets or Sets TotalRooms
        /// </summary>
        [DataMember(Name = "totalRooms", IsRequired = true, EmitDefaultValue = true)]
        public double TotalRooms { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessWithRoomsAllOf {\n");
            sb.Append("  Rooms: ").Append(Rooms).Append("\n");
            sb.Append("  TotalRooms: ").Append(TotalRooms).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessWithRoomsAllOf);
        }

        /// <summary>
        /// Returns true if ProcessWithRoomsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessWithRoomsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessWithRoomsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rooms == input.Rooms ||
                    this.Rooms != null &&
                    input.Rooms != null &&
                    this.Rooms.SequenceEqual(input.Rooms)
                ) && 
                (
                    this.TotalRooms == input.TotalRooms ||
                    this.TotalRooms.Equals(input.TotalRooms)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rooms != null)
                {
                    hashCode = (hashCode * 59) + this.Rooms.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRooms.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
