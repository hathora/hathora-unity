/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Hathora.Cloud.Sdk.Client;
using Hathora.Cloud.Sdk.Model;

namespace Hathora.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        Lobby CreateLobby(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        ApiResponse<Lobby> CreateLobbyWithHttpInfo(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        Lobby CreateLocalLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        ApiResponse<Lobby> CreateLocalLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        Lobby CreatePrivateLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        ApiResponse<Lobby> CreatePrivateLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        Lobby CreatePublicLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        ApiResponse<Lobby> CreatePublicLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <returns>Lobby</returns>
        Lobby GetLobbyInfo(string appId, string roomId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Lobby</returns>
        ApiResponse<Lobby> GetLobbyInfoWithHttpInfo(string appId, string roomId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <returns>List&lt;Lobby&gt;</returns>
        List<Lobby> ListActivePublicLobbies(string appId, Region? region = default(Region?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Lobby&gt;</returns>
        ApiResponse<List<Lobby>> ListActivePublicLobbiesWithHttpInfo(string appId, Region? region = default(Region?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <returns>Lobby</returns>
        Lobby SetLobbyState(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <returns>ApiResponse of Lobby</returns>
        ApiResponse<Lobby> SetLobbyStateWithHttpInfo(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        System.Threading.Tasks.Task<Lobby> CreateLobbyAsync(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lobby>> CreateLobbyWithHttpInfoAsync(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Lobby> CreateLocalLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Lobby>> CreateLocalLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Lobby> CreatePrivateLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Lobby>> CreatePrivateLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Lobby> CreatePublicLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Lobby>> CreatePublicLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        System.Threading.Tasks.Task<Lobby> GetLobbyInfoAsync(string appId, string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lobby>> GetLobbyInfoWithHttpInfoAsync(string appId, string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lobby&gt;</returns>
        System.Threading.Tasks.Task<List<Lobby>> ListActivePublicLobbiesAsync(string appId, Region? region = default(Region?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lobby&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Lobby>>> ListActivePublicLobbiesWithHttpInfoAsync(string appId, Region? region = default(Region?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        System.Threading.Tasks.Task<Lobby> SetLobbyStateAsync(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        System.Threading.Tasks.Task<ApiResponse<Lobby>> SetLobbyStateWithHttpInfoAsync(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV2Api : ILobbyV2ApiSync, ILobbyV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LobbyV2Api : IDisposable, ILobbyV2Api
    {
        private Hathora.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LobbyV2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LobbyV2Api(string basePath)
        {
            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new Hathora.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV2Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LobbyV2Api(Hathora.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LobbyV2Api(Hathora.Cloud.Sdk.Client.ISynchronousClient client, Hathora.Cloud.Sdk.Client.IAsynchronousClient asyncClient, Hathora.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Hathora.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        public Lobby CreateLobby(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = CreateLobbyWithHttpInfo(appId, authorization, createLobbyRequest, roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> CreateLobbyWithHttpInfo(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreateLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreateLobby");

            // verify the required parameter 'createLobbyRequest' is set
            if (createLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createLobbyRequest' when calling LobbyV2Api->CreateLobby");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createLobbyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lobby>("/lobby/v2/{appId}/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        public async System.Threading.Tasks.Task<Lobby> CreateLobbyAsync(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateLobbyWithHttpInfoAsync(appId, authorization, createLobbyRequest, roomId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> CreateLobbyWithHttpInfoAsync(string appId, string authorization, CreateLobbyRequest createLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreateLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreateLobby");

            // verify the required parameter 'createLobbyRequest' is set
            if (createLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createLobbyRequest' when calling LobbyV2Api->CreateLobby");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createLobbyRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Lobby>("/lobby/v2/{appId}/create", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        public Lobby CreateLocalLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = CreateLocalLobbyWithHttpInfo(appId, authorization, createPrivateLobbyRequest, roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> CreateLocalLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreateLocalLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreateLocalLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreateLocalLobby");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lobby>("/lobby/v2/{appId}/create/local", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocalLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Lobby> CreateLocalLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateLocalLobbyWithHttpInfoAsync(appId, authorization, createPrivateLobbyRequest, roomId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> CreateLocalLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreateLocalLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreateLocalLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreateLocalLobby");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Lobby>("/lobby/v2/{appId}/create/local", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLocalLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        public Lobby CreatePrivateLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = CreatePrivateLobbyWithHttpInfo(appId, authorization, createPrivateLobbyRequest, roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> CreatePrivateLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreatePrivateLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreatePrivateLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreatePrivateLobby");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lobby>("/lobby/v2/{appId}/create/private", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrivateLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Lobby> CreatePrivateLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePrivateLobbyWithHttpInfoAsync(appId, authorization, createPrivateLobbyRequest, roomId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> CreatePrivateLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreatePrivateLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreatePrivateLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreatePrivateLobby");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Lobby>("/lobby/v2/{appId}/create/private", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrivateLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>Lobby</returns>
        [Obsolete]
        public Lobby CreatePublicLobby(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = CreatePublicLobbyWithHttpInfo(appId, authorization, createPrivateLobbyRequest, roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <returns>ApiResponse of Lobby</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> CreatePublicLobbyWithHttpInfo(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreatePublicLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreatePublicLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreatePublicLobby");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Lobby>("/lobby/v2/{appId}/create/public", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePublicLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Lobby> CreatePublicLobbyAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePublicLobbyWithHttpInfoAsync(appId, authorization, createPrivateLobbyRequest, roomId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="createPrivateLobbyRequest"></param>
        /// <param name="roomId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> CreatePublicLobbyWithHttpInfoAsync(string appId, string authorization, CreatePrivateLobbyRequest createPrivateLobbyRequest, string roomId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->CreatePublicLobby");

            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV2Api->CreatePublicLobby");

            // verify the required parameter 'createPrivateLobbyRequest' is set
            if (createPrivateLobbyRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createPrivateLobbyRequest' when calling LobbyV2Api->CreatePublicLobby");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPrivateLobbyRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Lobby>("/lobby/v2/{appId}/create/public", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePublicLobby", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <returns>Lobby</returns>
        public Lobby GetLobbyInfo(string appId, string roomId)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = GetLobbyInfoWithHttpInfo(appId, roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Lobby</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> GetLobbyInfoWithHttpInfo(string appId, string roomId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->GetLobbyInfo");

            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'roomId' when calling LobbyV2Api->GetLobbyInfo");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roomId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(roomId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Lobby>("/lobby/v2/{appId}/info/{roomId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLobbyInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        public async System.Threading.Tasks.Task<Lobby> GetLobbyInfoAsync(string appId, string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLobbyInfoWithHttpInfoAsync(appId, roomId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> GetLobbyInfoWithHttpInfoAsync(string appId, string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->GetLobbyInfo");

            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'roomId' when calling LobbyV2Api->GetLobbyInfo");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roomId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(roomId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Lobby>("/lobby/v2/{appId}/info/{roomId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLobbyInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <returns>List&lt;Lobby&gt;</returns>
        public List<Lobby> ListActivePublicLobbies(string appId, Region? region = default(Region?))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> localVarResponse = ListActivePublicLobbiesWithHttpInfo(appId, region);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Lobby&gt;</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> ListActivePublicLobbiesWithHttpInfo(string appId, Region? region = default(Region?))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->ListActivePublicLobbies");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lobby>>("/lobby/v2/{appId}/list/public", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActivePublicLobbies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lobby&gt;</returns>
        public async System.Threading.Tasks.Task<List<Lobby>> ListActivePublicLobbiesAsync(string appId, Region? region = default(Region?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ListActivePublicLobbiesWithHttpInfoAsync(appId, region, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lobby&gt;)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>>> ListActivePublicLobbiesWithHttpInfoAsync(string appId, Region? region = default(Region?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->ListActivePublicLobbies");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Lobby>>("/lobby/v2/{appId}/list/public", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActivePublicLobbies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <returns>Lobby</returns>
        public Lobby SetLobbyState(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = SetLobbyStateWithHttpInfo(appId, roomId, setLobbyStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <returns>ApiResponse of Lobby</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> SetLobbyStateWithHttpInfo(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->SetLobbyState");

            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'roomId' when calling LobbyV2Api->SetLobbyState");

            // verify the required parameter 'setLobbyStateRequest' is set
            if (setLobbyStateRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'setLobbyStateRequest' when calling LobbyV2Api->SetLobbyState");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roomId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = setLobbyStateRequest;

            // authentication (auth0) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Lobby>("/lobby/v2/{appId}/setState/{roomId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLobbyState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Lobby</returns>
        public async System.Threading.Tasks.Task<Lobby> SetLobbyStateAsync(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SetLobbyStateWithHttpInfoAsync(appId, roomId, setLobbyStateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<Lobby> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="roomId"></param>
        /// <param name="setLobbyStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Lobby)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<Lobby>> SetLobbyStateWithHttpInfoAsync(string appId, string roomId, SetLobbyStateRequest setLobbyStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV2Api->SetLobbyState");

            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'roomId' when calling LobbyV2Api->SetLobbyState");

            // verify the required parameter 'setLobbyStateRequest' is set
            if (setLobbyStateRequest == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'setLobbyStateRequest' when calling LobbyV2Api->SetLobbyState");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roomId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = setLobbyStateRequest;

            // authentication (auth0) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Lobby>("/lobby/v2/{appId}/setState/{roomId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLobbyState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
